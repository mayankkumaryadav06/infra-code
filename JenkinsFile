pipeline {
  options {
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  agent {
    node any
  }

  parameters {
    booleanParam(
      name: 'create_distribution',
      defaultValue: false,
      description: 'Create Jar and Zip files for updated code in repo'
    )

    booleanParam(
      name: 'create_ami',
      defaultValue: false,
      description: 'Create AMI for all servers'
    )

		booleanParam(
			name: 'planInfrastructure',
			defaultValue: true,
			description: 'Check what is going to change in Infrastructure'
		)

		booleanParam(
			name: 'createInfrastructure',
			defaultValue: false,
			description: 'Create Infrastructure (You need to select plan checkbox for this. MANDATORY)'
		)

		booleanParam(
			name: 'destroyInfrastructure',
			defaultValue: false,
			description: 'Destroy Infrastructure'
		)
	}

	stages {
		stage('Prepare and Checkout') {
			steps {
				cleanWs()
				checkout scm
        //sh 'mkdir terraform-repo'
        //sh "git clone https://github.com/mayankkumaryadav06/infra-code.git"
        sh "chmod +x bin/*"
			}
		}

		stage('Create Code Distribution') {
			when {
				expression { return params.create_distribution }
			}
			steps {
        sh 'bin/create_distribution.sh'
      }
		}

		stage('Create Server AMIs') {
			when {
				expression { return params.create_ami }
			}
			steps {
			  sh "bin/create_baked_ami.sh"
			}
		}

    stage('Check Plan for Infrastructure') {
      when {
        expression { return params.planInfrastructure }
      }
      steps {
        sh "if [ ! -d infra-code/plan ]; then mkdir infra-code/plan; fi"

        sh "cd infra-code && terraform init && terraform plan -out=plan/terraform_plan.out"
      }
    }

		stage ("Create Infrastructure") {
			when {
				expression { return params.createInfrastructure }
			}
      steps {
				script {
					def userInput = input(
						id: 'confirm',
						message: 'Apply Terraform Stack?'
					)
				}
				sh "cd infra-code && terraform init && terraform apply plan/terraform_plan.out"
			}
		}

		stage('TF Destroy') {
			when {
				expression { return params.destroyInfrastructure }
			}
			steps {
				script {
					def userInput = input(
						id: 'confirm',
						message: 'Destroy Terraform Stack?'
					)
				}
				sh 'echo "Hello world. Going to destroy Infrastructure"'
				sh "cd infra-code && terraform destroy -auto-approve"
			}
		}
	}
}
